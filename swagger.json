{
  "openapi": "3.0.0",
  "info": {
    "title": "Pet Adoption Website",
    "version": "1.0.1",
    "description": "This API aims to provide comprehensive functionality for managing users and their pets, with proper error handling"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "summary": "Register a new user",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string" },
                  "password": { "type": "string" },
                  "firstName": { "type": "string" },
                  "lastName": { "type": "string" },
                  "phoneNumber": { "type": "string" },
                  "isAdmin": { "type": "boolean" }
                },
                "required": ["email", "password", "firstName", "lastName", "phoneNumber"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": { "$ref": "#/components/schemas/User" },
                    "token": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "description": "Bad request, missing required fields or email already registered" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login as an existing user",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string" },
                  "password": { "type": "string" }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "user": { "$ref": "#/components/schemas/User" },
                    "token": { "type": "string" }
                  }
                }
              }
            }
          },
          "401": { "description": "Incorrect password" },
          "404": { "description": "User not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/profile/{id}": {
      "get": {
        "summary": "Get user profile details",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User profile details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update user profile details",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated user profile details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/profile/{id}/password": {
      "put": {
        "summary": "Update user's password",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currentPassword": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string"
                  }
                },
                "required": [
                  "currentPassword",
                  "newPassword"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully"
          },
          "400": {
            "description": "Both current password and new password are required"
          },
          "401": {
            "description": "Incorrect current password"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/profile/{id}/role": {
      "get": {
        "summary": "Get user's current role",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User's current role"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Change user's role",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string"
                  }
                },
                "required": [
                  "role"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated user details"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{id}": {
      "delete": {
        "summary": "Delete user",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/profile/{id}/pets": {
      "get": {
        "summary": "Get user's pets",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User's pets"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/pets": {
      "get": {
        "summary": "Get all pets",
        "tags": ["Pets"],
        "responses": {
          "200": {
            "description": "List of pets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Pet" }
                }
              }
            }
          },
          "500": { "description": "Internal server error" }
        }
      },
      "post": {
        "summary": "Add a new pet",
        "tags": ["Pets"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pet added successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              }
            }
          },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/pets/search": {
      "get": {
        "summary": "Search pets based on various criteria",
        "tags": ["Pets"],
        "parameters": [
          {
            "name": "adoptionStatus",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter pets by adoption status"
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter pets by type"
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter pets by name (case-insensitive regex)"
          },
          {
            "name": "breed",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter pets by breed (case-insensitive regex)"
          },
          {
            "name": "heightCm",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Filter pets by minimum height (in centimeters)"
          },
          {
            "name": "weightKg",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Filter pets by minimum weight (in kilograms)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of pets matching the search criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/pets/{id}": {
      "get": {
        "summary": "Get a single pet by ID",
        "tags": ["Pets"],
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true, "description": "ID of the pet to get" }
        ],
        "responses": {
          "200": {
            "description": "Pet details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              }
            }
          },
          "404": { "description": "Pet not found" },
          "500": { "description": "Internal server error" }
        }
      },
      "put": {
        "summary": "Update pet details",
        "tags": ["Pets"],
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true, "description": "ID of the pet to update" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated pet details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              }
            }
          },
          "404": { "description": "Pet not found" },
          "500": { "description": "Internal server error" }
        }
      },
      "delete": {
        "summary": "Delete pet",
        "tags": ["Pets"],
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true, "description": "ID of the pet to delete" }
        ],
        "responses": {
          "200": { "description": "Pet deleted successfully" },
          "404": { "description": "Pet not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/pets/{id}/like": {
      "post": {
        "summary": "Like a pet",
        "tags": ["Pets"],
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true, "description": "ID of the pet to like" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "userId": { "type": "string" } },
                "required": ["userId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Pet liked successfully" },
          "404": { "description": "Pet not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/pets/{id}/unlike/{userId}": {
      "delete": {
        "summary": "Unlike a pet",
        "tags": ["Pets"],
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true, "description": "ID of the pet to unlike" },
          { "in": "path", "name": "userId", "schema": { "type": "string" }, "required": true, "description": "ID of the user who liked the pet" }
        ],
        "responses": {
          "200": { "description": "Pet unliked successfully" },
          "404": { "description": "Pet not found or user did not like the pet" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/pets/{id}/adopt": {
      "put": {
        "summary": "Adopt a pet",
        "tags": ["Pets"],
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true, "description": "ID of the pet to adopt" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "userId": { "type": "string" } },
                "required": ["userId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Pet adopted successfully" },
          "404": { "description": "Pet not found or pet is already adopted" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/pets/{id}/foster": {
      "put": {
        "summary": "Foster a pet",
        "tags": ["Pets"],
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true, "description": "ID of the pet to foster" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "userId": { "type": "string" } },
                "required": ["userId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Pet fostered successfully" },
          "404": { "description": "Pet not found or pet is already fostered" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/pets/{id}/return": {
      "put": {
        "summary": "Return a pet",
        "tags": ["Pets"],
        "parameters": [
          { "in": "path", "name": "id", "schema": { "type": "string" }, "required": true, "description": "ID of the pet to return" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "userId": { "type": "string" } },
                "required": ["userId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Pet returned successfully" },
          "404": { "description": "Pet not found or user is not currently fostering or adopting this pet" },
          "500": { "description": "Internal server error" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "email": { "type": "string" },
          "passwordHash": { "type": "string" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "phoneNumber": { "type": "string" },
          "role": { "type": "string" },
          "shortBio": { "type": "string" },
          "likedPets": { "type": "array", "items": { "type": "string" } },
          "fosteredPets": { "type": "array", "items": { "type": "string" } },
          "adoptedPets": { "type": "array", "items": { "type": "string" } }
        }
      },
      "Pet": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "name": { "type": "string" },
          "type": { "type": "string" },
          "breed": { "type": "string" },
          "heightCm": { "type": "integer" },
          "weightKg": { "type": "integer" },
          "age": { "type": "integer" },
          "adoptionStatus": { "type": "string" },
          "likedBy": { "type": "array", "items": { "type": "string" } },
          "fosteredBy": { "type": "string" },
          "adoptedBy": { "type": "string" }
        }
      }
    }
  }
}